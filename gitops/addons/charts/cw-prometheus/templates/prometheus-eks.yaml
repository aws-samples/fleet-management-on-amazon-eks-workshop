# create amazon-cloudwatch namespace
apiVersion: v1
kind: Namespace
metadata:
  name: amazon-cloudwatch
  labels:
    name: amazon-cloudwatch

---
# create configmap for prometheus cwagent config
apiVersion: v1
data:
  # cwagent json config
  cwagentconfig.json: |
    {
      "logs": {
        "metrics_collected": {
          "prometheus": {
            "prometheus_config_path": "/etc/prometheusconfig/prometheus.yaml",
            "emf_processor": {
              "metric_declaration": [
                {
                  "source_labels": ["job"],
                  "label_matcher": "^karpenter$",
                  "dimensions": [
                    ["ClusterName"]
                  ],
                  "metric_selectors": [
                    "^karpenter_consistency_errors$",
                    "^karpenter_deprovisioning_evaluation_duration_seconds$",
                    "^karpenter_deprovisioning_replacement_node_initialized_seconds$",
                    "^karpenter_interruption_deleted_messages$",
                    "^karpenter_interruption_message_latency_time_seconds$",
                    "^karpenter_interruption_received_messages$",
                    "^karpenter_nodes_allocatable$",
                    "^karpenter_nodes_system_overhead$",
                    "^karpenter_nodes_termination_time_seconds$",
                    "^karpenter_nodes_total_daemon_limits$",
                    "^karpenter_nodes_total_daemon_requests$",
                    "^karpenter_nodes_total_pod_limits$",
                    "^karpenter_nodes_total_pod_requests$",
                    "^karpenter_pods_startup_time_seconds$",
                    "^karpenter_cloudprovider_batcher_batch_size$",
                    "^karpenter_cloudprovider_batcher_batch_time_seconds$",
                    "^karpenter_cloudprovider_duration_seconds$",
                    "^karpenter_pods_state$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^karpenter$",
                  "dimensions": [
                    ["ClusterName","action"]
                  ],
                  "metric_selectors": [
                    "^karpenter_deprovisioning_actions_performed$",
                    "^karpenter_interruption_actions_performed$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^karpenter$",
                  "dimensions": [
                    ["ClusterName","provisioner"]
                  ],
                  "metric_selectors": [
                    "^karpenter_provisioner_scheduling_duration_seconds$",
                    "^karpenter_nodes_created$",
                    "^karpenter_nodes_terminated$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^karpenter$",
                  "dimensions": [
                    ["ClusterName","nodepool","resource_type"]
                  ],
                  "metric_selectors": [
                    "^karpenter_nodepool_limit$",
                    "^karpenter_nodepool_usage$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^coredns$",
                  "dimensions": [
                    ["ClusterName"]
                  ],
                  "metric_selectors": [
                    "^coredns_cache_entries$",
                    "^coredns_cache_hits_total$",
                    "^coredns_cache_misses_total$",
                    "^coredns_cache_requests_total$",
                    "^coredns_dns_requests_total$",
                    "^coredns_dns_responses_total$"
                  ]
                }
              ]
            }
          }
        },
        "force_flush_interval": 5
      }
    }
kind: ConfigMap
metadata:
  name: prometheus-cwagentconfig
  namespace: amazon-cloudwatch

---
# create configmap for prometheus scrape config
apiVersion: v1
data:
  # prometheus config
  prometheus.yaml: |
    global:
      scrape_interval: 1m
      scrape_timeout: 10s
    scrape_configs:
    - job_name: karpenter
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - karpenter
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: http-metrics
        action: keep
    - job_name: 'coredns'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace]
        regex: 'kube-system'
        action: keep
      - source_labels: [__meta_kubernetes_pod_name]
        regex: 'coredns-.*'
        action: keep
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: amazon-cloudwatch

---
# create cwagent service account and role binding
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cwagent-prometheus
  namespace: amazon-cloudwatch

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cwagent-prometheus-role
rules:
  - apiGroups: [""]
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
    - extensions
    resources:
    - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cwagent-prometheus-role-binding
subjects:
  - kind: ServiceAccount
    name: cwagent-prometheus
    namespace: amazon-cloudwatch
roleRef:
  kind: ClusterRole
  name: cwagent-prometheus-role
  apiGroup: rbac.authorization.k8s.io

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cwagent-prometheus
  namespace: amazon-cloudwatch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cwagent-prometheus
  template:
    metadata:
      labels:
        app: cwagent-prometheus
    spec:
      containers:
        - name: cloudwatch-agent
          image: public.ecr.aws/cloudwatch-agent/cloudwatch-agent:1.300042.1b746
          imagePullPolicy: Always
          resources:
            limits:
              cpu:  1000m
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 200Mi
          # Please don't change below envs
          env:
            - name: CI_VERSION
              value: "k8s/1.3.26"
          # Please don't change the mountPath
          volumeMounts:
            - name: prometheus-cwagentconfig
              mountPath: /etc/cwagentconfig
            - name: prometheus-config
              mountPath: /etc/prometheusconfig

      volumes:
        - name: prometheus-cwagentconfig
          configMap:
            name: prometheus-cwagentconfig
        - name: prometheus-config
          configMap:
            name: prometheus-config
      terminationGracePeriodSeconds: 60
      serviceAccountName: cwagent-prometheus
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 6 }}
      {{- end }}
